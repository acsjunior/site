[["index.html", "Introdução à Álgebra Linear com Python Prefácio", " Introdução à Álgebra Linear com Python António C. da Silva Júnior 2022-06-05 Prefácio Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed id commodo ligula. Aliquam erat volutpat. Nulla tincidunt metus vehicula neque rutrum, a viverra nisi blandit. Praesent convallis faucibus ipsum, ac tincidunt ligula maximus et. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec a congue nulla. Praesent interdum gravida dictum. Phasellus non vestibulum arcu, id tempus quam. Sed a tempus mauris. Pellentesque nec nibh gravida, posuere nunc in, mattis arcu. Aliquam posuere lorem purus, at porttitor ex lacinia non. Pellentesque dolor lacus, tristique quis dui id, lobortis finibus erat. Morbi vitae tellus posuere, laoreet velit sit amet, volutpat elit. Sed ultrices at justo eu viverra. Etiam ornare viverra libero ac finibus. Donec scelerisque fermentum dolor, nec iaculis nibh mollis a. Integer iaculis sed nisi eget commodo. Suspendisse vitae porta sapien, ac finibus metus. Vivamus ligula elit, aliquet euismod arcu in, elementum varius magna. Praesent pretium porttitor imperdiet. Integer malesuada odio est, eget fringilla massa accumsan sed. Suspendisse mi eros, facilisis sit amet volutpat vel, semper in tortor. Cras nec nibh ut lorem tempus consectetur et a lectus. Nam cursus ut quam vel blandit. "],["matrizes.html", "1 Matrizes 1.1 Tipos de matrizes 1.2 Operações 1.3 Determinante 1.4 Inversão", " 1 Matrizes Matriz é uma tabela formada por números ou símbolos distribuídos em \\(n\\) linhas e \\(m\\) colunas. Por exemplo, \\[ \\mathbf{A} = \\begin{bmatrix} 4 &amp; 2 &amp; 1 \\\\ 8 &amp; 3 &amp; 5 \\end{bmatrix} \\] é uma matriz \\(2 \\times 3\\) (lê-se “2 por 3” — 2 linhas e 3 colunas), e \\[\\mathbf{B} = \\begin{bmatrix} 7 &amp; 0 \\\\ 1 &amp; -1 \\\\ 11 &amp; -3 \\\\ 4 &amp; 6 \\end{bmatrix} \\text{,}\\] uma matriz \\(4 \\times 2\\). Os elementos de uma matriz são representados por \\(a_{ij}\\), em que os índices \\(i\\) e \\(j\\) indicam a linha e a coluna às quais o elemento pertence, respectivamente. Por convenção, as linhas são numeradas de cima para baixo, com \\(i \\in \\{1,2,\\ldots,n\\}\\), e as colunas, da esquerda para a direita, com \\(j \\in \\{1,2,\\ldots,m\\}\\). Por exemplo, \\[ \\mathbf{A} = \\begin{bmatrix} a_{11} &amp; a_{12} &amp; a_{13} \\\\ a_{21} &amp; a_{22} &amp; a_{23} \\end{bmatrix} \\text{.} \\] Cada elemento da matriz pode ser identificado por sua localizão exclusiva. Por exemplo, \\(a_{21}\\) referencia o elemento da segunda linha (\\(L_2\\)) e primeira coluna (\\(C_1\\)) de \\(\\mathbf{A}\\), ou seja, \\(a_{21} = 8\\). Cada linha de uma matriz é uma matriz \\(1 \\times m\\). A \\(L_2\\) de \\(\\mathbf{A}\\), por exemplo, é uma matriz \\(1 \\times 3\\): \\[ \\mathbf{L_2} = \\begin{bmatrix} 8 &amp; 3 &amp; 5 \\end{bmatrix} \\text{.} \\] E cada coluna de uma matriz é uma matriz \\(n \\times 1\\). Por exemplo, a \\(C_1\\) de \\(\\mathbf{B}\\) é uma matriz \\(4 \\times 1\\): \\[ \\mathbf{C_1} = \\begin{bmatrix} 7 \\\\ 1 \\\\ 11 \\\\ 4 \\end{bmatrix} \\text{.} \\] Matrizes \\(1 \\times m\\) e \\(n \\times 1\\) também são conhecidas como vetores. Portanto, pode-se dizer que uma matriz \\(n \\times m\\) é composta por \\(n\\) vetores linha ou \\(m\\) vetores coluna. Exemplo 1.1 Primeiros passos com matrizes em Python. Importante observar que na linguagem Python os índices sempre começam em 0. Ou seja, a linha ou coluna 1 da matriz é representada pelo índice 0 em Python, a linha ou coluna 2 pelo índice 1, e assim sucessivamente. Construindo as matrizes \\(\\mathbf{A}\\) e \\(\\mathbf{B}\\): import numpy as np A = np.matrix([[1,2,3], [4,5,6]]) A ## matrix([[1, 2, 3], ## [4, 5, 6]]) B = np.matrix([[7,0], [1,-1], [11, -3], [4,6]]) B ## matrix([[ 7, 0], ## [ 1, -1], ## [11, -3], ## [ 4, 6]]) Extraindo as dimensões de \\(\\mathbf{A}\\): n, m = A.shape print(f&#39;{n} linhas e {m} colunas&#39;) ## 2 linhas e 3 colunas Selecionando o elemento \\(a_{21}\\) de \\(\\mathbf{A}\\): A[1,0] ## 4 Selecionando a linha 2 de \\(\\mathbf{A}\\): L2 = A[1,:] L2 ## matrix([[4, 5, 6]]) Selecionando a coluna 1 de \\(\\mathbf{B}\\): C1 = B[:,0] C1 ## matrix([[ 7], ## [ 1], ## [11], ## [ 4]]) 1.1 Tipos de matrizes As matrizes podem ser classificadas em função das suas dimensões e da disposição dos seus elementos. Matriz quadrada de ordem \\(n\\) é toda matriz \\(n \\times n\\), ou seja, uma matriz que possui o mesmo número de linhas e colunas. \\(\\mathbf{A}\\), por exemplo, é uma matriz quadrada de ordem 4: \\[ \\mathbf{A} = \\begin{bmatrix} 3 &amp; 2 &amp; 1 &amp; 7 \\\\ 4 &amp; 5 &amp; 6 &amp; 0 \\\\ 8 &amp; 9 &amp; -1 &amp; -2 \\\\ -3 &amp; -4 &amp; -5 &amp; -6 \\end{bmatrix} \\text{.} \\] O conjunto \\(\\{ 3,5,-1,-6 \\}\\), composto por elementos com índices \\(i = j\\), é a diagonal principal de \\(\\mathbf{A}\\). Em contrapartida, sua diagonal secundária é o conjunto \\(\\{ 7,6,9,-3 \\}\\), composto por elementos que têm a soma dos índices \\(ij\\) igual a \\(n + 1\\). Matriz diagonal é uma matriz quadrada com os elementos que não pertencem à diagonal todos nulos. Por exemplo, \\[ \\mathbf{D} = \\begin{bmatrix} 3 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 5 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; -1 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; -6 \\end{bmatrix} \\text{.} \\] Matriz triangular inferior é uma matriz quadrada com os elementos acima da diagonal principal todos nulos. Por exemplo, \\[ \\mathbf{L} = \\begin{bmatrix} 3 &amp; 0 &amp; 0 &amp; 0 \\\\ 4 &amp; 5 &amp; 0 &amp; 0 \\\\ 8 &amp; 9 &amp; -1 &amp; 0 \\\\ -3 &amp; -4 &amp; -5 &amp; -6 \\end{bmatrix} \\text{.} \\] Matriz triangular superior é uma matriz quadrada com os elementos abaixo da diagonal principal todos nulos. Por exemplo, \\[ \\mathbf{U} = \\begin{bmatrix} 3 &amp; 2 &amp; 1 &amp; 7 \\\\ 0 &amp; 5 &amp; 6 &amp; 0 \\\\ 0 &amp; 0 &amp; -1 &amp; -2 \\\\ 0 &amp; 0 &amp; 0 &amp; -6 \\end{bmatrix} \\text{.} \\] Matriz identidade é uma matriz quadrada com os elementos da diagonal principal todos iguais a 1. Por exemplo, \\[ \\mathbf{I} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix} \\text{.} \\] Matriz zero ou nula é uma matriz com todos os elementos iguais a zero. Por exemplo, \\[ \\mathbf{Z} = \\begin{bmatrix} 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 0 \\end{bmatrix} \\text{.} \\] Matriz simétrica é uma matriz tal que \\(a_{ij} = a_{ji}\\). Adicionalmente, é uma matriz cuja linha 1 é igual à coluna 1, linha 2 igual à coluna 2, e assim sucessivamente. Por exemplo, \\[ \\mathbf{S} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 &amp; 4 \\\\ 2 &amp; 3 &amp; 4 &amp; 5 \\\\ 3 &amp; 4 &amp; 5 &amp; 6 \\\\ 4 &amp; 5 &amp; 6 &amp; 7 \\end{bmatrix} \\text{.} \\] Exemplo 1.2 Matrizes especiais em Python. Construindo a matriz quadrada \\(\\mathbf{A}\\): import numpy as np A = np.matrix([[3,2,1,7], [4,5,6,0], [8,9,-1,-2], [-3,-4,-5,-6]]) A ## matrix([[ 3, 2, 1, 7], ## [ 4, 5, 6, 0], ## [ 8, 9, -1, -2], ## [-3, -4, -5, -6]]) Extraindo a diagonal principal de \\(\\mathbf{A}\\): np.diagonal(A) ## array([ 3, 5, -1, -6]) Extraindo a diagonal secundária de \\(\\mathbf{A}\\): np.diagonal(np.fliplr(A)) ## array([ 7, 6, 9, -3]) Construindo a matriz diagonal \\(\\mathbf{D}\\) a partir de \\(\\mathbf{A}\\): D = np.asmatrix(np.diag(np.diagonal(A))) D ## matrix([[ 3, 0, 0, 0], ## [ 0, 5, 0, 0], ## [ 0, 0, -1, 0], ## [ 0, 0, 0, -6]]) Construindo a matriz triangular inferior \\(\\mathbf{L}\\) a partir de \\(\\mathbf{A}\\): L = np.asmatrix(np.tril(A)) L ## matrix([[ 3, 0, 0, 0], ## [ 4, 5, 0, 0], ## [ 8, 9, -1, 0], ## [-3, -4, -5, -6]]) Construindo a matriz triangular superior \\(\\mathbf{U}\\) a partir de \\(\\mathbf{A}\\): U = np.asmatrix(np.triu(A)) U ## matrix([[ 3, 2, 1, 7], ## [ 0, 5, 6, 0], ## [ 0, 0, -1, -2], ## [ 0, 0, 0, -6]]) Construindo a matriz identidade \\(\\mathbf{I_4}\\) (ordem 4): I = np.asmatrix(np.identity(4)) I ## matrix([[1., 0., 0., 0.], ## [0., 1., 0., 0.], ## [0., 0., 1., 0.], ## [0., 0., 0., 1.]]) Construindo a matriz zero \\(\\mathbf{Z_{4 \\times 4}}\\): Z = np.asmatrix(np.zeros((4,4))) Z ## matrix([[0., 0., 0., 0.], ## [0., 0., 0., 0.], ## [0., 0., 0., 0.], ## [0., 0., 0., 0.]]) 1.2 Operações 1.2.1 Transposição A transposição de uma matriz reorganiza os elementos de modo que as linhas se transformam em colunas, e as colunas em linhas. Por exemplo, seja a matriz \\[\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\\\ 5 &amp; 6 \\\\ 7 &amp; 8 \\end{bmatrix} \\text{,} \\] com dimensões \\(4 \\times 2\\), sua transposta, denotada por \\(\\mathbf{A}^T\\), é uma matriz com dimensões \\(2 \\times 4\\): \\[ \\mathbf{A}^T = \\begin{bmatrix} 1 &amp; 3 &amp; 5 &amp; 7 \\\\ 2 &amp; 4 &amp; 6 &amp; 8 \\end{bmatrix} \\text{.} \\]. Exemplo 1.3 Transposição de matrizes em Python. Construindo a matriz \\(\\mathbf{A}\\): import numpy as np A = np.matrix([[1,2], [3,4], [5,6], [7,8]]) A ## matrix([[1, 2], ## [3, 4], ## [5, 6], ## [7, 8]]) Obtendo a transposta de \\(\\mathbf{A}\\): import numpy as np A.T ## matrix([[1, 3, 5, 7], ## [2, 4, 6, 8]]) 1.2.2 Soma e subtração Somar e subtrair matrizes só é permitido para matrizes com as mesmas dimensões \\(n \\times m\\). Por exemplo, sejam as matrizes \\[ \\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} \\text{ e } \\mathbf{B} = \\begin{bmatrix} 5 &amp; 6 \\\\ 7 &amp; 8 \\end{bmatrix} \\text{,} \\] o resultado de \\(\\mathbf{A} + \\mathbf{B}\\) é uma matriz com as mesmas dimensões, em que cada elemento é o resultado da soma dos elementos correspondentes em \\(\\mathbf{A}\\) e \\(\\mathbf{B}\\), portanto, \\[ \\mathbf{A} + \\mathbf{B} = \\begin{bmatrix} a_{11} + b_{11} &amp; a_{12} + b_{12} \\\\ a_{21} + b_{21} &amp; a_{22} + b_{22} \\end{bmatrix} = \\begin{bmatrix} 6 &amp; 8 \\\\ 10 &amp; 12 \\end{bmatrix} \\text{.} \\] De maneira análoga funciona a subtração: \\[ \\mathbf{A} - \\mathbf{B} = \\begin{bmatrix} a_{11} - b_{11} &amp; a_{12} - b_{12} \\\\ a_{21} - b_{21} &amp; a_{22} - b_{22} \\end{bmatrix} = \\begin{bmatrix} -4 &amp; -4 \\\\ -4 &amp; -4 \\end{bmatrix} \\] Exemplo 1.4 Soma e subtração de matrizes em Python. Construindo as matrizes \\(\\mathbf{A}\\) e \\(\\mathbf{B}\\): import numpy as np A = np.matrix([[1,2], [3,4]]) A ## matrix([[1, 2], ## [3, 4]]) B = np.matrix([[5,6], [7,8]]) B ## matrix([[5, 6], ## [7, 8]]) Efetuando \\(\\mathbf{A} + \\mathbf{B}\\): A + B ## matrix([[ 6, 8], ## [10, 12]]) np.add(A,B) ## matrix([[ 6, 8], ## [10, 12]]) Efetuando \\(\\mathbf{A} - \\mathbf{B}\\): A - B ## matrix([[-4, -4], ## [-4, -4]]) np.subtract(A,B) ## matrix([[-4, -4], ## [-4, -4]]) 1.2.3 Multiplicação 1.2.3.1 Multiplicação entre duas matrizes Sejam as matrizes \\(\\mathbf{A}_{n \\times m}\\) e \\(\\mathbf{B}_{r \\times s}\\), o produto \\(\\mathbf{AB}\\) só existe se \\(m = s\\). Em outras palavras, \\(\\mathbf{AB}\\) só existe se o número de colunas de \\(\\mathbf{A}\\) for igual ao número de linhas de \\(\\mathbf{B}\\). Por exemplo, dadas as matrizes \\[\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\\\ 5 &amp; 6 \\\\ 7 &amp; 8 \\end{bmatrix} \\text{ e } \\mathbf{B} = \\begin{bmatrix} 1 &amp; 2 &amp; 3\\\\ 4 &amp; 5 &amp; 6 \\end{bmatrix} \\text{,} \\] O produto \\(\\mathbf{AB}\\) resulta em uma matriz \\(\\mathbf{C}\\) com o mesmo número de linhas de \\(\\mathbf{A}\\) e o mesmo número de colunas de \\(\\mathbf{B}\\), em que cada elemento é definido pela expressão \\[\\begin{equation} cij = \\sum\\limits_{k=1}^m a_{ik}b_{kj} \\text{,} \\tag{1.1} \\end{equation}\\] com \\(i = \\{1,2,\\ldots n\\}\\), \\(j = \\{1,2,\\ldots s\\}\\), sendo \\(n\\) o número de linhas de \\(\\mathbf{A}\\), \\(s\\) o número de colunas de \\(\\mathbf{B}\\), e \\(m\\) o número de colunas de \\(\\mathbf{A}\\) e o número de linhas de \\(\\mathbf{B}\\). Por exemplo, \\[\\begin{equation} \\begin{split} \\mathbf{AB} &amp; =\\begin{bmatrix} a_{11}b_{11} + a_{12}b_{21} &amp; a_{11}b_{12} + a_{12}b_{22} &amp; a_{11}b_{13} + a_{12}b_{23} \\\\ a_{21}b_{11} + a_{22}b_{21} &amp; a_{21}b_{12} + a_{22}b_{22} &amp; a_{21}b_{13} + a_{22}b_{23} \\\\ a_{31}b_{11} + a_{32}b_{21} &amp; a_{31}b_{12} + a_{32}b_{22} &amp; a_{31}b_{13} + a_{32}b_{23} \\\\ a_{41}b_{11} + a_{42}b_{21} &amp; a_{41}b_{12} + a_{42}b_{22} &amp; a_{41}b_{13} + a_{42}b_{23} \\end{bmatrix} \\\\ &amp; =\\begin{bmatrix} (1)(1) + (2)(4) &amp; (1)(2) + (2)(5) &amp; (1)(3) + (2)(6) \\\\ (3)(1) + (4)(4) &amp; (3)(2) + (4)(5) &amp; (3)(3) + (4)(6) \\\\ (5)(1) + (6)(4) &amp; (5)(2) + (6)(5) &amp; (5)(3) + (6)(6) \\\\ (7)(1) + (8)(4) &amp; (7)(2) + (8)(5) &amp; (7)(3) + (8)(6) \\end{bmatrix} \\\\ &amp; =\\begin{bmatrix} 9 &amp; 12 &amp; 15 \\\\ 19 &amp; 26 &amp; 33 \\\\ 29 &amp; 40 &amp; 51 \\\\ 39 &amp; 54 &amp; 69 \\end{bmatrix} \\text{.} \\end{split} \\end{equation}\\] Observe que o produto \\(\\mathbf{BA}\\) não existe, pois o número de colunas de \\(\\mathbf{B}\\) é diferente do número de linhas de \\(\\mathbf{A}.\\) 1.2.3.2 Multiplicação por escalar Esta operação consiste na multiplicação de uma matriz por um número real (escalar). A multiplicação de uma matriz \\(\\mathbf{A}\\) por um escalar \\(k\\) resulta em uma matriz formada por todos os elementos de \\(\\mathbf{A}\\) multiplicados por \\(k\\). Por exemplo, \\[ 2 \\cdot \\mathbf{A} = \\begin{bmatrix} 2a_{11} &amp; 2a_{12} \\\\ 2a_{21} &amp; 2a_{22} \\\\ 2a_{31} &amp; 2a_{32} \\\\ 2a_{41} &amp; 2a_{42} \\end{bmatrix} = \\begin{bmatrix} 2 &amp; 4 \\\\ 6 &amp; 8 \\\\ 10 &amp; 12 \\\\ 14 &amp; 16 \\end{bmatrix} \\text{.} \\] 1.2.3.3 Produto de Hadamard Esta operação só é permitida para matrizes com as mesmas dimensões \\(n \\times m\\). Por exemplo, considere a matriz \\[ \\mathbf{C} = \\begin{bmatrix} 1 &amp; 5 \\\\ 2 &amp; 6 \\\\ 3 &amp; 7 \\\\ 4 &amp; 8 \\end{bmatrix}\\text{,} \\] o resultado de \\(\\mathbf{A} \\odot \\mathbf{C}\\) é uma matriz com as mesmas dimensões, em que cada elemento é o resultado da soma dos elementos correspondentes em \\(\\mathbf{A}\\) e \\(\\mathbf{C}\\), portanto, \\[ \\mathbf{A} \\odot \\mathbf{C} = \\begin{bmatrix} a_{11}c_{11} &amp; a_{12}c_{12} \\\\ a_{21}c_{21} &amp; a_{22}c_{22} \\\\ a_{31}c_{31} &amp; a_{32}c_{22} \\\\ a_{41}c_{41} &amp; a_{42}c_{42} \\end{bmatrix} = \\begin{bmatrix} 1 &amp; 10 \\\\ 6 &amp; 24 \\\\ 15 &amp; 42 \\\\ 28 &amp; 64 \\end{bmatrix} \\text{.} \\] Exemplo 1.5 Multiplicação de matrizes em Python. Construindo as matrizes \\(\\mathbf{A}\\), \\(\\mathbf{B}\\) e \\(\\mathbf{C}\\): import numpy as np A = np.matrix([[1,2], [3,4], [5,6], [7,8]]) A ## matrix([[1, 2], ## [3, 4], ## [5, 6], ## [7, 8]]) B = np.matrix([[1,2,3], [4,5,6]]) B ## matrix([[1, 2, 3], ## [4, 5, 6]]) C = np.matrix([[1,5], [2,6], [3,7], [4,8]]) C ## matrix([[1, 5], ## [2, 6], ## [3, 7], ## [4, 8]]) Verificando se o produto \\(\\mathbf{AB}\\) existe: A.shape[1] == B.shape[0] ## True Calculando o produto \\(\\mathbf{AB}\\): np.matmul(A,B) ## matrix([[ 9, 12, 15], ## [19, 26, 33], ## [29, 40, 51], ## [39, 54, 69]]) A @ B ## matrix([[ 9, 12, 15], ## [19, 26, 33], ## [29, 40, 51], ## [39, 54, 69]]) np.dot(A, B) ## matrix([[ 9, 12, 15], ## [19, 26, 33], ## [29, 40, 51], ## [39, 54, 69]]) A * B ## matrix([[ 9, 12, 15], ## [19, 26, 33], ## [29, 40, 51], ## [39, 54, 69]]) Verificando se o produto \\(\\mathbf{BA}\\) existe: B.shape[1] == A.shape[0] ## False Efetuando \\(2 \\cdot \\mathbf{A}\\): 2*A ## matrix([[ 2, 4], ## [ 6, 8], ## [10, 12], ## [14, 16]]) np.multiply(2, A) ## matrix([[ 2, 4], ## [ 6, 8], ## [10, 12], ## [14, 16]]) np.dot(2, A) ## matrix([[ 2, 4], ## [ 6, 8], ## [10, 12], ## [14, 16]]) Efetuando \\(A \\odot \\mathbf{C}\\): np.multiply(A, C) ## matrix([[ 1, 10], ## [ 6, 24], ## [15, 42], ## [28, 64]]) 1.3 Determinante O determinante de uma matriz quadrada é um escalar que fornece informações úteis quanto à existência ou não de soluções para um sistema linear e se uma matriz possui ou não inversa. O determinante de uma matriz \\(\\mathbf{M}_{1\\times1}\\), denotado por \\(\\det(\\mathbf{B})\\) ou \\(|\\mathbf{B}|\\), é o valor do único elemento da matriz. Ou seja, \\[ \\det(\\mathbf{M}) = \\det(\\begin{bmatrix} m_{11} \\end{bmatrix}) = m_{11} \\text{.} \\] Para matrizes \\(2 \\times 2\\) o determinante é obtido subtraindo o produto dos elementos da diagonal principal pelo produto dos elementos da diagonal secundária. Por exemplo, seja \\(\\mathbf{A}\\) uma matriz quadrada de ordem \\(2\\), \\[ \\mathbf{A} = \\begin{bmatrix} 5 &amp; 3 \\\\ 2 &amp; 4 \\end{bmatrix} \\text{,} \\] \\(\\det(\\mathbf{A})\\) é obtido da seguinte forma: \\[\\begin{equation} \\begin{split} \\det(\\mathbf{A}) &amp; = a_{11}a_{12} - a_{12}a_{21}\\\\ &amp; = 5 \\cdot 4 - 3 \\cdot 2 \\\\ &amp; = 14 \\text{.} \\end{split} \\end{equation}\\] Para matrizes quadradas de ordem \\(3\\), pode-se aplicar a regra de Sarrus, resumida na figura 1.1. Figura 1.1: Regra de Sarrus Por exemplo, seja \\(\\mathbf{B}\\) uma matriz quadrada de ordem \\(3\\), \\[ \\mathbf{B} = \\begin{bmatrix} 1 &amp; 3 &amp; 4 \\\\ 5 &amp; 2 &amp; -3 \\\\ 1 &amp; 4 &amp; 2 \\\\ \\end{bmatrix} \\text{,} \\] pela Regra de Sarrus, obtemos: \\[\\begin{equation} \\begin{split} \\det(\\mathbf{B}) &amp; =a_{11}a_{22}a_{33} + a_{12}a_{23}a_{31} + a_{13}a_{21}a_{32} - a_{31}a_{22}a_{13} - a_{32}a_{23}a_{11} - a_{33}a_{21}a_{12} \\\\ &amp; =(1)(2)(2)+(3)(-3)(1)+(4)(5)(4) - (1)(2)(4)-(4)(-3)(1)-(2)(5)(3) \\\\ &amp; =4-9+80-8+12-30 \\\\ &amp; = 49 \\text{.} \\end{split} \\end{equation}\\] O cálculo do determinante pode ser generalizado para matrizes de qualquer ordem por meio da expressão \\[\\begin{equation} \\sum\\limits_{j \\in P} (-1)^k a_{1j_1}a_{2,j_2} \\ldots a_{n,j_n} \\text{,} \\tag{1.2} \\end{equation}\\] em que \\(a_{1j}\\) são os elementos da matriz, \\(n\\) é a ordem da matriz, P é o conjunto com todas as \\(n!\\) permutações e \\(k\\) é o número de mudanças necessárias para que os segundos subscritos sejam colocados na ordem \\(1,2, \\ldots, n\\). Voltando à matriz \\(\\mathbf{B}_{3 \\times 3}\\), as \\(n!\\) permutações ficam definidas por \\[ P = \\{ (1,2,3), (1,3,2), (2,1,3), (2,3,1), (3,1,2), (3,2,1) \\} \\text{.} \\] Deste modo, \\[\\begin{equation} \\begin{split} \\det(\\mathbf{B}) &amp; =\\sum\\limits_{j \\in P} (-1)^k b_{1j_1}b_{2,j_2}b_{3,j_3} \\\\ &amp; =(-1)^0 4 + (-1)^1 (-12) + (-1)^1 30 + (-1)^2 (-9) + (-1)^2 80 + (-1)^3 8 \\\\ &amp; =4+12-30-9+80-8\\\\ &amp; = 49 \\text{.} \\end{split} \\end{equation}\\] Exemplo 1.6 Cálculo do determinante em Python. Construindo as matrizes \\(\\mathbf{A}\\) e \\(\\mathbf{B}\\): import numpy as np import scipy.linalg as la A = np.matrix([[5,3], [2,4]]) A ## matrix([[5, 3], ## [2, 4]]) B = np.matrix([[1,3,4], [5,2,-3], [1,4,2]]) B ## matrix([[ 1, 3, 4], ## [ 5, 2, -3], ## [ 1, 4, 2]]) Obtendo \\(\\det(\\mathbf{A})\\): np.linalg.det(A) ## 13.999999999999996 la.det(A) ## 14.0 Obtendo \\(\\det(\\mathbf{B})\\): np.linalg.det(B) ## 48.99999999999997 la.det(B) ## 49.0 1.4 Inversão Uma matriz quadrada \\(\\mathbf{A}\\) é inversível (ou não singular) se \\(\\det(\\mathbf{A}) \\neq 0\\). Matrizes não inversíveis também são conhecidas como matrizes singulares. Por exemplo, dada a matriz \\(\\mathbf{A}\\), \\[ \\mathbf{A} = \\begin{bmatrix} 1 &amp; 3 \\\\ 2 &amp; 7 \\end{bmatrix} \\text{,} \\] observa-se que \\(\\det(\\mathbf{A}) = 7 - 6 = 1\\), conforme visto em 1.3. Portanto, conclui-se que \\(\\mathbf{A}\\) é uma matriz inversível. Como \\(\\mathbf{A}\\) é inversível, então existe uma única matriz \\(\\mathbf{A}^{-1}\\) tal que \\(\\mathbf{A}\\mathbf{A}^{-1} = \\mathbf{A}^{-1}\\mathbf{A} = \\mathbf{I}\\). Portanto, \\[ \\begin{bmatrix} 1 &amp; 3 \\\\ 2 &amp; 7 \\end{bmatrix}\\begin{bmatrix} a&#39;_{11} &amp; a&#39;_{12} \\\\ a&#39;_{21} &amp; a&#39;_{22} \\end{bmatrix} = \\begin{bmatrix} 1 &amp; 0 \\\\ 0 &amp; 1 \\end{bmatrix} \\text{.} \\] Calculando o produto \\(\\mathbf{AA}^{-1}\\), conforme visto em 1.2.3.1, obtem-se: \\[ \\begin{bmatrix} 1 &amp; 3 \\\\ 2 &amp; 7 \\end{bmatrix}\\begin{bmatrix} a&#39;_{11} &amp; a&#39;_{12} \\\\ a&#39;_{21} &amp; a&#39;_{22} \\end{bmatrix} = \\begin{bmatrix} 1a&#39;_{11} + 3a&#39;_{21} &amp; 1a&#39;_{12} + 3a&#39;_{22}\\\\ 2a&#39;_{11} + 7a&#39;_{21} &amp; 2a&#39;_{12} + 7a&#39;_{22} \\end{bmatrix} \\text{.} \\] Logo, \\[ \\begin{bmatrix} 1a&#39;_{11} + 3a&#39;_{21} &amp; 1a&#39;_{12} + 3a&#39;_{22}\\\\ 2a&#39;_{11} + 7a&#39;_{21} &amp; 2a&#39;_{12} + 7a&#39;_{22} \\end{bmatrix} = \\begin{bmatrix} 1 &amp; 0 \\\\ 0 &amp; 1 \\end{bmatrix} \\text{.} \\] Por definição de igualdade de matrizes, temos: \\[ \\left\\{ \\begin{array}{lcr} a&#39;_{11} + 3a&#39;_{21} = 1\\\\ 2a&#39;_{11} + 7a&#39;_{21} = 0\\\\ \\end{array} \\right. \\implies a&#39;_{11} = 7 \\text{ e } a&#39;_{21} = -2 \\text{,} \\] \\[ \\left\\{ \\begin{array}{lcr} a&#39;_{12} + 3a&#39;_{22} = 0\\\\ 2a&#39;_{12} + 7a&#39;_{22} = 1\\\\ \\end{array} \\right. \\implies a&#39;_{12} = -3 \\text{ e } a&#39;_{22} = 1 \\text{.} \\] Portanto, \\[ \\mathbf{A}^{-1} = \\begin{bmatrix} 7 &amp; -3 \\\\ -2 &amp; 1 \\end{bmatrix} \\text{.} \\] Conforme visto em 1.2, a divisão é uma operação não definida para matrizes, entretanto, a inversão serve para um propósito equivalente. Por exemplo, considere a seguinte expressão: \\[ \\dfrac{b}{a} = \\dfrac{1}{a} \\cdot b = a^{-1}b \\text{.} \\] Observe que dividir \\(b\\) por \\(a\\) é o mesmo que multiplicar o inverso de \\(a\\) por \\(b\\). Portanto, sejam as matrizes \\[\\mathbf{A} = \\begin{bmatrix} 1 &amp; 3 \\\\ 2 &amp; 7 \\end{bmatrix} \\text{ e } \\mathbf{B} = \\begin{bmatrix} 2 &amp; 4 \\\\ 6 &amp; 8 \\end{bmatrix} \\text{,} \\] se \\(\\mathbf{A}\\) é inversível, então o produto \\[ \\mathbf{A}^{-1}\\mathbf{B} = \\begin{bmatrix} -4 &amp; 4 \\\\ 2 &amp; 0 \\end{bmatrix} \\] equivale à divisão de \\(\\mathbf{B}\\) por \\(\\mathbf{A}\\). Exemplo 1.7 Inversão de matrizes em Python. Construindo as matrizes \\(\\mathbf{A}\\) e \\(\\mathbf{B}\\): import numpy as np A = np.matrix([[1,3], [2,7]]) A ## matrix([[1, 3], ## [2, 7]]) B = np.matrix([[2,4], [6,8]]) B ## matrix([[2, 4], ## [6, 8]]) Obtendo a inversa \\(\\mathbf{A}^{-1}\\): A.I ## matrix([[ 7., -3.], ## [-2., 1.]]) Conferindo as expressões \\(\\mathbf{A}\\mathbf{A}^{-1} = \\mathbf{I}\\) e \\(\\mathbf{A}^{-1}\\mathbf{A} = \\mathbf{I}\\) I = A @ A.I I ## matrix([[1., 0.], ## [0., 1.]]) I = A.I @ A I ## matrix([[1., 0.], ## [0., 1.]]) Calculando \\(\\mathbf{A}^{-1} \\mathbf{B}\\): A.I @ B ## matrix([[-4., 4.], ## [ 2., 0.]]) "],["sistemas-de-equações-lineares.html", "2 Sistemas de equações lineares", " 2 Sistemas de equações lineares Uma equação é dita linear quando se apresenta na forma \\(a_{1}x_1 + a_{2}x_2 + \\ldots + a_{m}x_m = b\\), em que \\(x_j\\) são as incógnitas, \\(a_j\\) os coeficientes e \\(b\\) o termo independente. Um sistema linear é um conjunto de \\(n\\) equações lineares na forma \\[\\begin{equation} \\left\\{ \\begin{array}{lcr} a_{11}x_1 + a_{12}x_2 + \\ldots + a_{1m}x_m = b_1 \\\\ a_{21}x_1 + a_{22}x_2 + \\ldots + a_{2m}x_m = b_2 \\\\ \\vdots \\\\ a_{n1}x_1 + a_{n2}x_2 + \\ldots + a_{nm}x_m = b_n \\text{.} \\end{array} \\right. \\tag{2.1} \\end{equation}\\] Por exemplo, em um curso de pós graduação, a nota final de cada aluno é calculada por meio da expressão \\(a_{i1}x_1 + a_{i2}x_2 + a_{i3}x_3 = b_i\\), em que a \\(a_{i1}\\) é a nota da lista de exercícios, \\(a_{i2}\\) a nota do trabalho, \\(a_{i3}\\) a nota da prova e \\(x_1\\), \\(x_2\\) e \\(x_3\\) os pesos de cada atividade. A tabela 2.1 representa a relação das notas de três alunos com suas respectivas notas finais. Tabela 2.1: Relação de notas por atividade e nota final Exercícios Trabalho Prova Nota final Aluno1 10 8 9 9.8 Aluno2 7 6 8 8.0 Aluno3 7 5 10 8.9 Considerando os dados da tabela 2.1, os pesos \\(x_1\\), \\(x_2\\) e \\(x_3\\) podem ser obtidos por meio da resolução do sistema de equações lineares representado em (2.2). \\[\\begin{equation} \\left\\{ \\begin{array}{lcr} 10x_1 + 8x_2 + 9x_3 = 9.8 \\\\ 7x_1 + 6x_2 + 8x_3 = 8 \\\\ 7x_1 + 5x_2 + 10x_3 = 8.9 \\text{.} \\end{array} \\right. \\tag{2.2} \\end{equation}\\] Um sistema de equações lineares pode ser representado por meio da notação matricial \\(\\mathbf{Ax} = \\mathbf{b}\\), em que \\(\\mathbf{A}\\) é a matriz dos coeficientes, \\(\\mathbf{x}\\) é o vetor solução e \\(\\mathbf{b}\\) o vetor dos termos independentes. Ou seja, \\[ \\begin{bmatrix} 10 &amp; 8 &amp; 9 \\\\ 7 &amp; 6 &amp; 8 \\\\ 7 &amp; 5 &amp; 10 \\end{bmatrix}\\begin{bmatrix} x_1 \\\\ x_2 \\\\ x_3 \\end{bmatrix} = \\begin{bmatrix} 9.8 \\\\ 8 \\\\ 8.9 \\end{bmatrix} \\text{.} \\] Se \\(\\det(\\mathbf{A}) \\neq 0\\), então o sistema possui uma única solução e, portanto, é possível resolvê-lo por meio da expressão \\(\\mathbf{x} = \\mathbf{A}^{-1}\\mathbf{b}\\). Calculando o determinante de \\(\\mathbf{A}\\) conforme visto em 1.3, temos \\(\\det(\\mathbf{A})=25\\). Logo, a solução do sistema (2.2) é dada por \\[\\begin{equation} \\begin{split} \\mathbf{x} &amp; = \\mathbf{A}^{-1}\\mathbf{b} \\\\ &amp; =\\begin{bmatrix} 0.8 &amp; -1.4 &amp; 0.4 \\\\ -0.56 &amp; 1.48 &amp; -0.68 \\\\ -0.28 &amp; 0.24 &amp; 0.16 \\end{bmatrix}\\begin{bmatrix} 9.8 \\\\ 8 \\\\ 8.9 \\end{bmatrix} \\\\ &amp; =\\begin{bmatrix} 0.2 \\\\ 0.3 \\\\ 0.6 \\end{bmatrix} \\text{.} \\end{split} \\end{equation}\\] Por fim, temos como solução do sistema (2.2) os valores \\(x_1=0.2\\), \\(x_2=0.3\\) e \\(x_3=0.6\\). Exemplo 2.1 Resolução de um sistema linear com Python. Construindo a matriz dos coeficientes \\(\\mathbf{A}\\) e o vetor dos termos independentes \\(\\mathbf{b}\\): import numpy as np A = np.matrix([[10,8,9], [7,6,8], [7,5,10]]) A ## matrix([[10, 8, 9], ## [ 7, 6, 8], ## [ 7, 5, 10]]) b = np.matrix([9.8, 8, 8.9]).T b ## matrix([[9.8], ## [8. ], ## [8.9]]) Resolvendo o sistema pela expressão \\(\\mathbf{x} = \\mathbf{A}^{-1}\\mathbf{b}\\): x = A.I @ b x ## matrix([[0.2], ## [0.3], ## [0.6]]) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
